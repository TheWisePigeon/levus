import chalk from "chalk";
import fs from "fs-extra"

const { existsSync } = fs

const RECOGNIZABLE_FILES = {
    svelte: "svelte.config.js",
    nextjs: "next.config.js"
}


export function generateComponentTree(component, indent = 0) {
    const indentString = '│  '.repeat(indent);
    const lineCharacter = indent === 0 ? '' : '├─ ';

    console.log(indentString + lineCharacter + chalk.bold(component.name));

    if (component.layouts && component.layouts.length > 0) {
        console.log(indentString + '│  ' + chalk.yellow.bold('Layouts'));
        component.layouts.forEach((layout, index) => {
            const isLast = index === component.layouts.length - 1;
            const layoutCharacter = isLast ? '└─ ' : '├─ ';
            console.log(indentString + '│  ' + layoutCharacter + chalk.green(layout.name) + ': ' + chalk.gray(layout.description));
        });
    }

    if (component.ui && component.ui.length > 0) {
        console.log(indentString + '│  ' + chalk.yellow.bold('UI'));
        component.ui.forEach((uiComponent, index) => {
            const isLast = index === component.ui.length - 1;
            const uiCharacter = isLast ? '└─ ' : '├─ ';
            console.log(indentString + '│  ' + uiCharacter + chalk.blue(uiComponent.name) + ': ' + chalk.gray(uiComponent.description));
        });
    }

    if (component.subcomponents && component.subcomponents.length > 0) {
        component.subcomponents.forEach((subcomponent, index) => {
            const isLast = index === component.subcomponents.length - 1;
            const subComponentCharacter = isLast ? '└─ ' : '├─ ';
            generateComponentTree(subcomponent, indent + 1);
        });
    }
}

/**
    * @param framework {string}
    * @param frameworks {Record<string, string>}
    * @returns {boolean}
    * */
export function framework_exists(framework, frameworks) {
    return frameworks.includes(framework)
}

export async function init(){
    log("Welcome to Levus CLI.")
    log("Take a few seconds to set up Levus in your app")
    /**
        * @type { "svelte" }
        */
    let detected_framework 
    for (const key in RECOGNIZABLE_FILES) {
        if(existsSync(RECOGNIZABLE_FILES[key])){
            detected_framework = key
            break
        }
    }
    if(detected_framework!==""){
        log(`We detected that you are in a ${detected_framework} project`)
        log("Where do you want Levus to import your components?")
        const { location } = await inquirer.prompt({ name:"location", default:frameworks[detected_framework].import_path })
        const content = `#This file was auto generated by Levus. Please don't change it's content unless you know what you are doing.
IMPORT_PATH=${location}
UI_FRAMEWORK=${detected_framework}
        `
        await fs.writeFile("./.levusrc", content).then(_=>{
            log("You're good to go. Have fun using Levus :))")
            process.exit(0)
        }).catch(err=>{
            log("Something went wrong")
            log(err)
            log("Please retry or open an issue on https://github.com/TheWisePigeon/levus/issues")
            process.exit(0)
        })
    }
    log("No framework detected. Tell us what framework are you using")
    process.exit(1)
}
